// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// UpdateScriptDataHandlerFunc turns a function with the right signature into a update script data handler
type UpdateScriptDataHandlerFunc func(UpdateScriptDataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateScriptDataHandlerFunc) Handle(params UpdateScriptDataParams) middleware.Responder {
	return fn(params)
}

// UpdateScriptDataHandler interface for that can handle valid update script data params
type UpdateScriptDataHandler interface {
	Handle(UpdateScriptDataParams) middleware.Responder
}

// NewUpdateScriptData creates a new http.Handler for the update script data operation
func NewUpdateScriptData(ctx *middleware.Context, handler UpdateScriptDataHandler) *UpdateScriptData {
	return &UpdateScriptData{Context: ctx, Handler: handler}
}

/*UpdateScriptData swagger:route PUT /projects/{projectID}/data/{scriptID}/{dataId} updateScriptData

Update Data

*/
type UpdateScriptData struct {
	Context *middleware.Context
	Handler UpdateScriptDataHandler
}

func (o *UpdateScriptData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateScriptDataParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateScriptDataBody Data Update
//
// The properties that are allowed when updating a Data.
// swagger:model UpdateScriptDataBody
type UpdateScriptDataBody struct {

	// Any
	// Required: true
	Value interface{} `json:"value"`
}

// Validate validates this update script data body
func (o *UpdateScriptDataBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateScriptDataBody) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateScriptDataBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateScriptDataBody) UnmarshalBinary(b []byte) error {
	var res UpdateScriptDataBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateScriptDataOKBody Entity
//
// Represents a database entity
// swagger:model UpdateScriptDataOKBody
type UpdateScriptDataOKBody struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// rev
	// Required: true
	Rev *string `json:"rev"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateScriptDataOKBody) UnmarshalJSON(raw []byte) error {
	// UpdateScriptDataOKBodyAO0
	var dataUpdateScriptDataOKBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateScriptDataOKBodyAO0); err != nil {
		return err
	}

	o.ID = dataUpdateScriptDataOKBodyAO0.ID

	o.Rev = dataUpdateScriptDataOKBodyAO0.Rev

	// UpdateScriptDataOKBodyAO1
	var dataUpdateScriptDataOKBodyAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateScriptDataOKBodyAO1); err != nil {
		return err
	}

	o.CreatedAt = dataUpdateScriptDataOKBodyAO1.CreatedAt

	o.UpdatedAt = dataUpdateScriptDataOKBodyAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateScriptDataOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataUpdateScriptDataOKBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}

	dataUpdateScriptDataOKBodyAO0.ID = o.ID

	dataUpdateScriptDataOKBodyAO0.Rev = o.Rev

	jsonDataUpdateScriptDataOKBodyAO0, errUpdateScriptDataOKBodyAO0 := swag.WriteJSON(dataUpdateScriptDataOKBodyAO0)
	if errUpdateScriptDataOKBodyAO0 != nil {
		return nil, errUpdateScriptDataOKBodyAO0
	}
	_parts = append(_parts, jsonDataUpdateScriptDataOKBodyAO0)

	var dataUpdateScriptDataOKBodyAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}

	dataUpdateScriptDataOKBodyAO1.CreatedAt = o.CreatedAt

	dataUpdateScriptDataOKBodyAO1.UpdatedAt = o.UpdatedAt

	jsonDataUpdateScriptDataOKBodyAO1, errUpdateScriptDataOKBodyAO1 := swag.WriteJSON(dataUpdateScriptDataOKBodyAO1)
	if errUpdateScriptDataOKBodyAO1 != nil {
		return nil, errUpdateScriptDataOKBodyAO1
	}
	_parts = append(_parts, jsonDataUpdateScriptDataOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update script data o k body
func (o *UpdateScriptDataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateScriptDataOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateScriptDataOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateScriptDataOKBody) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("updateScriptDataOK"+"."+"rev", "body", o.Rev); err != nil {
		return err
	}

	return nil
}

func (o *UpdateScriptDataOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updateScriptDataOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateScriptDataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateScriptDataOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateScriptDataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
