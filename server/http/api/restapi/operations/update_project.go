// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// UpdateProjectHandlerFunc turns a function with the right signature into a update project handler
type UpdateProjectHandlerFunc func(UpdateProjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateProjectHandlerFunc) Handle(params UpdateProjectParams) middleware.Responder {
	return fn(params)
}

// UpdateProjectHandler interface for that can handle valid update project params
type UpdateProjectHandler interface {
	Handle(UpdateProjectParams) middleware.Responder
}

// NewUpdateProject creates a new http.Handler for the update project operation
func NewUpdateProject(ctx *middleware.Context, handler UpdateProjectHandler) *UpdateProject {
	return &UpdateProject{Context: ctx, Handler: handler}
}

/*UpdateProject swagger:route PUT /projects/{projectID} updateProject

Update Project

*/
type UpdateProject struct {
	Context *middleware.Context
	Handler UpdateProjectHandler
}

func (o *UpdateProject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateProjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateProjectBody Project Common
//
// The properties that are shared amongst all versions of the Project model.
// swagger:model UpdateProjectBody
type UpdateProjectBody struct {

	// description
	// Max Length: 255
	// Min Length: 10
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Name *string `json:"name"`
}

// Validate validates this update project body
func (o *UpdateProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProjectBody) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"description", "body", string(o.Description), 10); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"description", "body", string(o.Description), 255); err != nil {
		return err
	}

	return nil
}

func (o *UpdateProjectBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", string(*o.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", string(*o.Name), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProjectBody) UnmarshalBinary(b []byte) error {
	var res UpdateProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateProjectOKBody Entity
//
// Represents a database entity
// swagger:model UpdateProjectOKBody
type UpdateProjectOKBody struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// rev
	// Required: true
	Rev *string `json:"rev"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateProjectOKBody) UnmarshalJSON(raw []byte) error {
	// UpdateProjectOKBodyAO0
	var dataUpdateProjectOKBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateProjectOKBodyAO0); err != nil {
		return err
	}

	o.ID = dataUpdateProjectOKBodyAO0.ID

	o.Rev = dataUpdateProjectOKBodyAO0.Rev

	// UpdateProjectOKBodyAO1
	var dataUpdateProjectOKBodyAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateProjectOKBodyAO1); err != nil {
		return err
	}

	o.CreatedAt = dataUpdateProjectOKBodyAO1.CreatedAt

	o.UpdatedAt = dataUpdateProjectOKBodyAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateProjectOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataUpdateProjectOKBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}

	dataUpdateProjectOKBodyAO0.ID = o.ID

	dataUpdateProjectOKBodyAO0.Rev = o.Rev

	jsonDataUpdateProjectOKBodyAO0, errUpdateProjectOKBodyAO0 := swag.WriteJSON(dataUpdateProjectOKBodyAO0)
	if errUpdateProjectOKBodyAO0 != nil {
		return nil, errUpdateProjectOKBodyAO0
	}
	_parts = append(_parts, jsonDataUpdateProjectOKBodyAO0)

	var dataUpdateProjectOKBodyAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}

	dataUpdateProjectOKBodyAO1.CreatedAt = o.CreatedAt

	dataUpdateProjectOKBodyAO1.UpdatedAt = o.UpdatedAt

	jsonDataUpdateProjectOKBodyAO1, errUpdateProjectOKBodyAO1 := swag.WriteJSON(dataUpdateProjectOKBodyAO1)
	if errUpdateProjectOKBodyAO1 != nil {
		return nil, errUpdateProjectOKBodyAO1
	}
	_parts = append(_parts, jsonDataUpdateProjectOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update project o k body
func (o *UpdateProjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProjectOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateProjectOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateProjectOKBody) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("updateProjectOK"+"."+"rev", "body", o.Rev); err != nil {
		return err
	}

	return nil
}

func (o *UpdateProjectOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updateProjectOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProjectOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateProjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
