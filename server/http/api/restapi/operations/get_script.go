// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetScriptHandlerFunc turns a function with the right signature into a get script handler
type GetScriptHandlerFunc func(GetScriptParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetScriptHandlerFunc) Handle(params GetScriptParams) middleware.Responder {
	return fn(params)
}

// GetScriptHandler interface for that can handle valid get script params
type GetScriptHandler interface {
	Handle(GetScriptParams) middleware.Responder
}

// NewGetScript creates a new http.Handler for the get script operation
func NewGetScript(ctx *middleware.Context, handler GetScriptHandler) *GetScript {
	return &GetScript{Context: ctx, Handler: handler}
}

/*GetScript swagger:route GET /projects/{projectID}/scripts/{scriptID} getScript

Get Script

*/
type GetScript struct {
	Context *middleware.Context
	Handler GetScriptHandler
}

func (o *GetScript) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetScriptParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetScriptOKBody Script Entity
// swagger:model GetScriptOKBody
type GetScriptOKBody struct {
	GetScriptOKBodyAllOf0

	// description
	// Max Length: 255
	// Min Length: 10
	Description string `json:"description,omitempty"`

	// execution
	// Required: true
	Execution *GetScriptOKBodyAO1Execution `json:"execution"`

	// name
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Name *string `json:"name"`

	// persistence
	// Required: true
	Persistence *GetScriptOKBodyAO1Persistence `json:"persistence"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetScriptOKBody) UnmarshalJSON(raw []byte) error {
	// GetScriptOKBodyAO0
	var getScriptOKBodyAO0 GetScriptOKBodyAllOf0
	if err := swag.ReadJSON(raw, &getScriptOKBodyAO0); err != nil {
		return err
	}
	o.GetScriptOKBodyAllOf0 = getScriptOKBodyAO0

	// GetScriptOKBodyAO1
	var dataGetScriptOKBodyAO1 struct {
		Description string `json:"description,omitempty"`

		Execution *GetScriptOKBodyAO1Execution `json:"execution"`

		Name *string `json:"name"`

		Persistence *GetScriptOKBodyAO1Persistence `json:"persistence"`
	}
	if err := swag.ReadJSON(raw, &dataGetScriptOKBodyAO1); err != nil {
		return err
	}

	o.Description = dataGetScriptOKBodyAO1.Description

	o.Execution = dataGetScriptOKBodyAO1.Execution

	o.Name = dataGetScriptOKBodyAO1.Name

	o.Persistence = dataGetScriptOKBodyAO1.Persistence

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetScriptOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getScriptOKBodyAO0, err := swag.WriteJSON(o.GetScriptOKBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getScriptOKBodyAO0)

	var dataGetScriptOKBodyAO1 struct {
		Description string `json:"description,omitempty"`

		Execution *GetScriptOKBodyAO1Execution `json:"execution"`

		Name *string `json:"name"`

		Persistence *GetScriptOKBodyAO1Persistence `json:"persistence"`
	}

	dataGetScriptOKBodyAO1.Description = o.Description

	dataGetScriptOKBodyAO1.Execution = o.Execution

	dataGetScriptOKBodyAO1.Name = o.Name

	dataGetScriptOKBodyAO1.Persistence = o.Persistence

	jsonDataGetScriptOKBodyAO1, errGetScriptOKBodyAO1 := swag.WriteJSON(dataGetScriptOKBodyAO1)
	if errGetScriptOKBodyAO1 != nil {
		return nil, errGetScriptOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetScriptOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get script o k body
func (o *GetScriptOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GetScriptOKBodyAllOf0
	if err := o.GetScriptOKBodyAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersistence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetScriptOKBody) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MinLength("getScriptOK"+"."+"description", "body", string(o.Description), 10); err != nil {
		return err
	}

	if err := validate.MaxLength("getScriptOK"+"."+"description", "body", string(o.Description), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetScriptOKBody) validateExecution(formats strfmt.Registry) error {

	if err := validate.Required("getScriptOK"+"."+"execution", "body", o.Execution); err != nil {
		return err
	}

	if o.Execution != nil {
		if err := o.Execution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getScriptOK" + "." + "execution")
			}
			return err
		}
	}

	return nil
}

func (o *GetScriptOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getScriptOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("getScriptOK"+"."+"name", "body", string(*o.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("getScriptOK"+"."+"name", "body", string(*o.Name), 100); err != nil {
		return err
	}

	return nil
}

func (o *GetScriptOKBody) validatePersistence(formats strfmt.Registry) error {

	if err := validate.Required("getScriptOK"+"."+"persistence", "body", o.Persistence); err != nil {
		return err
	}

	if o.Persistence != nil {
		if err := o.Persistence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getScriptOK" + "." + "persistence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetScriptOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetScriptOKBody) UnmarshalBinary(b []byte) error {
	var res GetScriptOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetScriptOKBodyAO1Execution Script Execution Settings
//
// Represents script execution settings like query and params
// swagger:model GetScriptOKBodyAO1Execution
type GetScriptOKBodyAO1Execution struct {

	// params
	Params map[string]interface{} `json:"params,omitempty"`

	// query
	// Required: true
	// Min Length: 8
	Query *string `json:"query"`
}

// Validate validates this get script o k body a o1 execution
func (o *GetScriptOKBodyAO1Execution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetScriptOKBodyAO1Execution) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("getScriptOK"+"."+"execution"+"."+"query", "body", o.Query); err != nil {
		return err
	}

	if err := validate.MinLength("getScriptOK"+"."+"execution"+"."+"query", "body", string(*o.Query), 8); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetScriptOKBodyAO1Execution) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetScriptOKBodyAO1Execution) UnmarshalBinary(b []byte) error {
	var res GetScriptOKBodyAO1Execution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetScriptOKBodyAO1Persistence Script Persistence
// swagger:model GetScriptOKBodyAO1Persistence
type GetScriptOKBodyAO1Persistence struct {

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`
}

// Validate validates this get script o k body a o1 persistence
func (o *GetScriptOKBodyAO1Persistence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetScriptOKBodyAO1Persistence) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("getScriptOK"+"."+"persistence"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetScriptOKBodyAO1Persistence) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetScriptOKBodyAO1Persistence) UnmarshalBinary(b []byte) error {
	var res GetScriptOKBodyAO1Persistence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetScriptOKBodyAllOf0 Entity
//
// Represents a database entity
// swagger:model GetScriptOKBodyAllOf0
type GetScriptOKBodyAllOf0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// rev
	// Required: true
	Rev *string `json:"rev"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetScriptOKBodyAllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Rev = dataAO0.Rev

	// AO1
	var dataAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	o.CreatedAt = dataAO1.CreatedAt

	o.UpdatedAt = dataAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetScriptOKBodyAllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}

	dataAO0.ID = o.ID

	dataAO0.Rev = o.Rev

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}

	dataAO1.CreatedAt = o.CreatedAt

	dataAO1.UpdatedAt = o.UpdatedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get script o k body all of0
func (o *GetScriptOKBodyAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetScriptOKBodyAllOf0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetScriptOKBodyAllOf0) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("rev", "body", o.Rev); err != nil {
		return err
	}

	return nil
}

func (o *GetScriptOKBodyAllOf0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetScriptOKBodyAllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetScriptOKBodyAllOf0) UnmarshalBinary(b []byte) error {
	var res GetScriptOKBodyAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
