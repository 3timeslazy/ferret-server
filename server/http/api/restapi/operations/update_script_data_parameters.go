// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateScriptDataParams creates a new UpdateScriptDataParams object
// no default values defined in spec.
func NewUpdateScriptDataParams() UpdateScriptDataParams {

	return UpdateScriptDataParams{}
}

// UpdateScriptDataParams contains all the bound params for the update script data operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateScriptData
type UpdateScriptDataParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Body UpdateScriptDataBody
	/*
	  Required: true
	  In: path
	*/
	DataID string
	/*
	  Required: true
	  In: path
	*/
	ProjectID string
	/*
	  Required: true
	  Pattern: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
	  In: path
	*/
	ScriptID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateScriptDataParams() beforehand.
func (o *UpdateScriptDataParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body UpdateScriptDataBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = body
			}
		}
	}
	rDataID, rhkDataID, _ := route.Params.GetOK("dataId")
	if err := o.bindDataID(rDataID, rhkDataID, route.Formats); err != nil {
		res = append(res, err)
	}

	rProjectID, rhkProjectID, _ := route.Params.GetOK("projectID")
	if err := o.bindProjectID(rProjectID, rhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	rScriptID, rhkScriptID, _ := route.Params.GetOK("scriptID")
	if err := o.bindScriptID(rScriptID, rhkScriptID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDataID binds and validates parameter DataID from path.
func (o *UpdateScriptDataParams) bindDataID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.DataID = raw

	return nil
}

// bindProjectID binds and validates parameter ProjectID from path.
func (o *UpdateScriptDataParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ProjectID = raw

	return nil
}

// bindScriptID binds and validates parameter ScriptID from path.
func (o *UpdateScriptDataParams) bindScriptID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ScriptID = raw

	if err := o.validateScriptID(formats); err != nil {
		return err
	}

	return nil
}

// validateScriptID carries on validations for parameter ScriptID
func (o *UpdateScriptDataParams) validateScriptID(formats strfmt.Registry) error {

	if err := validate.Pattern("scriptID", "path", o.ScriptID, `[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}`); err != nil {
		return err
	}

	return nil
}
