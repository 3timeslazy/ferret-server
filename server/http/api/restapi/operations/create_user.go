// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/MontFerret/ferret-server/server/http/api/models"
)

// CreateUserHandlerFunc turns a function with the right signature into a create user handler
type CreateUserHandlerFunc func(CreateUserParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUserHandlerFunc) Handle(params CreateUserParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateUserHandler interface for that can handle valid create user params
type CreateUserHandler interface {
	Handle(CreateUserParams, *models.Principal) middleware.Responder
}

// NewCreateUser creates a new http.Handler for the create user operation
func NewCreateUser(ctx *middleware.Context, handler CreateUserHandler) *CreateUser {
	return &CreateUser{Context: ctx, Handler: handler}
}

/*CreateUser swagger:route POST /users createUser

Create User

*/
type CreateUser struct {
	Context *middleware.Context
	Handler CreateUserHandler
}

func (o *CreateUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateUserBody User Common
// swagger:model CreateUserBody
type CreateUserBody struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	// Required: true
	Password *string `json:"password"`

	// role
	Role string `json:"role,omitempty"`
}

// Validate validates this create user body
func (o *CreateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateUserBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserBody) UnmarshalBinary(b []byte) error {
	var res CreateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateUserCreatedBody Entity
//
// Represents a database entity
// swagger:model CreateUserCreatedBody
type CreateUserCreatedBody struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// rev
	// Required: true
	Rev *string `json:"rev"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateUserCreatedBody) UnmarshalJSON(raw []byte) error {
	// CreateUserCreatedBodyAO0
	var dataCreateUserCreatedBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}
	if err := swag.ReadJSON(raw, &dataCreateUserCreatedBodyAO0); err != nil {
		return err
	}

	o.ID = dataCreateUserCreatedBodyAO0.ID

	o.Rev = dataCreateUserCreatedBodyAO0.Rev

	// CreateUserCreatedBodyAO1
	var dataCreateUserCreatedBodyAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCreateUserCreatedBodyAO1); err != nil {
		return err
	}

	o.CreatedAt = dataCreateUserCreatedBodyAO1.CreatedAt

	o.UpdatedAt = dataCreateUserCreatedBodyAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateUserCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataCreateUserCreatedBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}

	dataCreateUserCreatedBodyAO0.ID = o.ID

	dataCreateUserCreatedBodyAO0.Rev = o.Rev

	jsonDataCreateUserCreatedBodyAO0, errCreateUserCreatedBodyAO0 := swag.WriteJSON(dataCreateUserCreatedBodyAO0)
	if errCreateUserCreatedBodyAO0 != nil {
		return nil, errCreateUserCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataCreateUserCreatedBodyAO0)

	var dataCreateUserCreatedBodyAO1 struct {
		CreatedAt *string `json:"created_at"`

		UpdatedAt string `json:"updated_at,omitempty"`
	}

	dataCreateUserCreatedBodyAO1.CreatedAt = o.CreatedAt

	dataCreateUserCreatedBodyAO1.UpdatedAt = o.UpdatedAt

	jsonDataCreateUserCreatedBodyAO1, errCreateUserCreatedBodyAO1 := swag.WriteJSON(dataCreateUserCreatedBodyAO1)
	if errCreateUserCreatedBodyAO1 != nil {
		return nil, errCreateUserCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataCreateUserCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create user created body
func (o *CreateUserCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateUserCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createUserCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserCreatedBody) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("createUserCreated"+"."+"rev", "body", o.Rev); err != nil {
		return err
	}

	return nil
}

func (o *CreateUserCreatedBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createUserCreated"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateUserCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
