// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// CreateScriptHandlerFunc turns a function with the right signature into a create script handler
type CreateScriptHandlerFunc func(CreateScriptParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateScriptHandlerFunc) Handle(params CreateScriptParams) middleware.Responder {
	return fn(params)
}

// CreateScriptHandler interface for that can handle valid create script params
type CreateScriptHandler interface {
	Handle(CreateScriptParams) middleware.Responder
}

// NewCreateScript creates a new http.Handler for the create script operation
func NewCreateScript(ctx *middleware.Context, handler CreateScriptHandler) *CreateScript {
	return &CreateScript{Context: ctx, Handler: handler}
}

/*CreateScript swagger:route POST /projects/{projectId}/scripts createScript

Create Script

*/
type CreateScript struct {
	Context *middleware.Context
	Handler CreateScriptHandler
}

func (o *CreateScript) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateScriptParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateScriptBody Script Common
//
// The properties that are shared amongst all versions of the Script model.
// swagger:model CreateScriptBody
type CreateScriptBody struct {

	// description
	// Max Length: 255
	// Min Length: 10
	Description string `json:"description,omitempty"`

	// execution
	// Required: true
	Execution *CreateScriptParamsBodyExecution `json:"execution"`

	// name
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Name *string `json:"name"`

	// persistence
	// Required: true
	Persistence *CreateScriptParamsBodyPersistence `json:"persistence"`
}

// Validate validates this create script body
func (o *CreateScriptBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersistence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateScriptBody) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"description", "body", string(o.Description), 10); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"description", "body", string(o.Description), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateScriptBody) validateExecution(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"execution", "body", o.Execution); err != nil {
		return err
	}

	if o.Execution != nil {
		if err := o.Execution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "execution")
			}
			return err
		}
	}

	return nil
}

func (o *CreateScriptBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", string(*o.Name), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", string(*o.Name), 100); err != nil {
		return err
	}

	return nil
}

func (o *CreateScriptBody) validatePersistence(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"persistence", "body", o.Persistence); err != nil {
		return err
	}

	if o.Persistence != nil {
		if err := o.Persistence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "persistence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateScriptBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateScriptBody) UnmarshalBinary(b []byte) error {
	var res CreateScriptBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateScriptCreatedBody Entity
//
// Represents a database entity
// swagger:model CreateScriptCreatedBody
type CreateScriptCreatedBody struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// rev
	// Required: true
	Rev *string `json:"rev"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateScriptCreatedBody) UnmarshalJSON(raw []byte) error {
	// CreateScriptCreatedBodyAO0
	var dataCreateScriptCreatedBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}
	if err := swag.ReadJSON(raw, &dataCreateScriptCreatedBodyAO0); err != nil {
		return err
	}

	o.ID = dataCreateScriptCreatedBodyAO0.ID

	o.Rev = dataCreateScriptCreatedBodyAO0.Rev

	// CreateScriptCreatedBodyAO1
	var dataCreateScriptCreatedBodyAO1 struct {
		CreatedAt *string `json:"createdAt"`

		UpdatedAt string `json:"updatedAt,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCreateScriptCreatedBodyAO1); err != nil {
		return err
	}

	o.CreatedAt = dataCreateScriptCreatedBodyAO1.CreatedAt

	o.UpdatedAt = dataCreateScriptCreatedBodyAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateScriptCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataCreateScriptCreatedBodyAO0 struct {
		ID *string `json:"id"`

		Rev *string `json:"rev"`
	}

	dataCreateScriptCreatedBodyAO0.ID = o.ID

	dataCreateScriptCreatedBodyAO0.Rev = o.Rev

	jsonDataCreateScriptCreatedBodyAO0, errCreateScriptCreatedBodyAO0 := swag.WriteJSON(dataCreateScriptCreatedBodyAO0)
	if errCreateScriptCreatedBodyAO0 != nil {
		return nil, errCreateScriptCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataCreateScriptCreatedBodyAO0)

	var dataCreateScriptCreatedBodyAO1 struct {
		CreatedAt *string `json:"createdAt"`

		UpdatedAt string `json:"updatedAt,omitempty"`
	}

	dataCreateScriptCreatedBodyAO1.CreatedAt = o.CreatedAt

	dataCreateScriptCreatedBodyAO1.UpdatedAt = o.UpdatedAt

	jsonDataCreateScriptCreatedBodyAO1, errCreateScriptCreatedBodyAO1 := swag.WriteJSON(dataCreateScriptCreatedBodyAO1)
	if errCreateScriptCreatedBodyAO1 != nil {
		return nil, errCreateScriptCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataCreateScriptCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create script created body
func (o *CreateScriptCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateScriptCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createScriptCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *CreateScriptCreatedBody) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("createScriptCreated"+"."+"rev", "body", o.Rev); err != nil {
		return err
	}

	return nil
}

func (o *CreateScriptCreatedBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createScriptCreated"+"."+"createdAt", "body", o.CreatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateScriptCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateScriptCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateScriptCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateScriptParamsBodyExecution Script Execution Settings
//
// Represents script execution settings like query and params
// swagger:model CreateScriptParamsBodyExecution
type CreateScriptParamsBodyExecution struct {

	// params
	Params map[string]interface{} `json:"params,omitempty"`

	// query
	// Required: true
	// Min Length: 8
	Query *string `json:"query"`
}

// Validate validates this create script params body execution
func (o *CreateScriptParamsBodyExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateScriptParamsBodyExecution) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"execution"+"."+"query", "body", o.Query); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"execution"+"."+"query", "body", string(*o.Query), 8); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateScriptParamsBodyExecution) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateScriptParamsBodyExecution) UnmarshalBinary(b []byte) error {
	var res CreateScriptParamsBodyExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateScriptParamsBodyPersistence Script Persistence
// swagger:model CreateScriptParamsBodyPersistence
type CreateScriptParamsBodyPersistence struct {

	// local
	Local string `json:"local,omitempty"`

	// remote
	Remote []string `json:"remote"`
}

// Validate validates this create script params body persistence
func (o *CreateScriptParamsBodyPersistence) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateScriptParamsBodyPersistence) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateScriptParamsBodyPersistence) UnmarshalBinary(b []byte) error {
	var res CreateScriptParamsBodyPersistence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
