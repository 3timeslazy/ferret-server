// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// TokenByCredentialsHandlerFunc turns a function with the right signature into a token by credentials handler
type TokenByCredentialsHandlerFunc func(TokenByCredentialsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TokenByCredentialsHandlerFunc) Handle(params TokenByCredentialsParams) middleware.Responder {
	return fn(params)
}

// TokenByCredentialsHandler interface for that can handle valid token by credentials params
type TokenByCredentialsHandler interface {
	Handle(TokenByCredentialsParams) middleware.Responder
}

// NewTokenByCredentials creates a new http.Handler for the token by credentials operation
func NewTokenByCredentials(ctx *middleware.Context, handler TokenByCredentialsHandler) *TokenByCredentials {
	return &TokenByCredentials{Context: ctx, Handler: handler}
}

/*TokenByCredentials swagger:route POST /auth/credentials tokenByCredentials

Get token by username/password

*/
type TokenByCredentials struct {
	Context *middleware.Context
	Handler TokenByCredentialsHandler
}

func (o *TokenByCredentials) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTokenByCredentialsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TokenByCredentialsBody Credentials
// swagger:model TokenByCredentialsBody
type TokenByCredentialsBody struct {

	// password
	// Required: true
	Password *string `json:"password"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this token by credentials body
func (o *TokenByCredentialsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TokenByCredentialsBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *TokenByCredentialsBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TokenByCredentialsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TokenByCredentialsBody) UnmarshalBinary(b []byte) error {
	var res TokenByCredentialsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// TokenByCredentialsOKBody Token
// swagger:model TokenByCredentialsOKBody
type TokenByCredentialsOKBody struct {

	// token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this token by credentials o k body
func (o *TokenByCredentialsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TokenByCredentialsOKBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("tokenByCredentialsOK"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TokenByCredentialsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TokenByCredentialsOKBody) UnmarshalBinary(b []byte) error {
	var res TokenByCredentialsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
